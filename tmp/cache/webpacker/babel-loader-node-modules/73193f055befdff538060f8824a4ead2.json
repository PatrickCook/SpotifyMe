{"ast":null,"code":"var _jsxFileName = \"/Users/patrickcook/Library/Mobile Documents/com~apple~CloudDocs/Programming/SpotifyMe/spotifyme/app/javascript/components/commons/App.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React, { Component } from 'react';\nimport { DevView } from './index.js';\nimport 'babel-polyfill';\nimport AppHeader from './Header.jsx';\nimport AppFooter from './Footer.jsx';\nimport { AppProvider, AppConsumer, appContext } from '../../contexts/AppContext';\n\nvar ProviderWrapper = function ProviderWrapper(_ref) {\n  var contexts = _ref.contexts,\n      children = _ref.children,\n      globalProps = _ref.globalProps;\n  return contexts.reduce(function (prev, context) {\n    return React.createElement(context, {\n      children: prev,\n      globalProps: globalProps\n    });\n  }, children);\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var appProps = this.props.appProps;\n      return React.createElement(ProviderWrapper, {\n        contexts: [AppProvider],\n        globalProps: {\n          header: appProps.header\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"appContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(AppHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, this.props.children), React.createElement(AppFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), !process.env.NODE_ENV || process.env.NODE_ENV === 'development' ? React.createElement(DevView, {\n        props: appProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }) : null));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar styles = {\n  appContainer: {}\n};\nexport default App; // do not wrap context api HOC consumer over App.jsx or page component (component generated by 'rails g react excontroller exindex').\n// Only apply them to child components of each page component.\n// then you can access context form any level of deepness.\n// Sample Context configured child Component (should be children of any react page component)\n\n/*\nimport React, { Component } from 'react'\nimport { \n  AppProvider, AppConsumer, appContext \n} from '~/path/for/AppContext'\n\nclass ContextSampleComponent extends Component {\n\n  toggleSample = () => {\n    this.props.appActions.setSampleData(!this.props.appState.sampleData)\n  }\n\n  render() {\n    return(\n        <div>\n            <p>{JSON.stringify(this.props.appState.sampleData)}</p>\n            <button onClick={this.toggleSample}>toggle appContext global data</button>\n        </div>\n    )\n  }\n}\n\nexport default appContext(ContextSampleComponent)\n*/","map":{"version":3,"sources":["/Users/patrickcook/Library/Mobile Documents/com~apple~CloudDocs/Programming/SpotifyMe/spotifyme/app/javascript/components/commons/App.jsx"],"names":["React","Component","DevView","AppHeader","AppFooter","AppProvider","AppConsumer","appContext","ProviderWrapper","contexts","children","globalProps","reduce","prev","context","createElement","App","props","appProps","header","process","env","NODE_ENV","styles","appContainer"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAO,gBAAP;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SACEC,WADF,EACeC,WADf,EAC4BC,UAD5B,QAEO,2BAFP;;AAIA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,MAAuBC,WAAvB,QAAuBA,WAAvB;AAAA,SAAyCF,QAAQ,CAACG,MAAT,CAC/D,UAACC,IAAD,EAAOC,OAAP;AAAA,WAAmBd,KAAK,CAACe,aAAN,CAAoBD,OAApB,EAA6B;AAC9CJ,MAAAA,QAAQ,EAAEG,IADoC;AAE9CF,MAAAA,WAAW,EAAEA;AAFiC,KAA7B,CAAnB;AAAA,GAD+D,EAK/DD,QAL+D,CAAzC;AAAA,CAAxB;;IAQMM,G;;;;;AAEJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA,4EACXA,KADW;AAElB;;;;6BAEQ;AAAA,UACCC,QADD,GACc,KAAKD,KADnB,CACCC,QADD;AAGP,aACE,oBAAC,eAAD;AAAiB,QAAA,QAAQ,EAAE,CAACb,WAAD,CAA3B;AAA0C,QAAA,WAAW,EAAE;AACrDc,UAAAA,MAAM,EAAED,QAAQ,CAACC;AADoC,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKF,KAAL,CAAWP,QADd,CAFJ,EAKE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EAMI,CAACU,OAAO,CAACC,GAAR,CAAYC,QAAb,IAAyBF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAnD,GACD,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAEJ,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADC,GAC8B,IAPjC,CAHF,CADF;AAeD;;;;EAxBejB,S;;AA2BlB,IAAMsB,MAAM,GAAG;AACbC,EAAAA,YAAY,EAAE;AADD,CAAf;AAMA,eAAeR,GAAf,C,CAEA;AACA;AACA;AAEA;;AACA","sourcesContent":["import React, { Component } from 'react'\nimport { DevView } from './index.js'\nimport 'babel-polyfill'\nimport AppHeader from './Header.jsx'\nimport AppFooter from './Footer.jsx'\nimport { \n  AppProvider, AppConsumer, appContext\n} from '../../contexts/AppContext'\n\nconst ProviderWrapper = ({ contexts, children, globalProps }) => contexts.reduce(\n  (prev, context) => React.createElement(context, {\n    children: prev,\n    globalProps: globalProps\n  }), \n  children\n);\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n    const { appProps } = this.props;\n\n    return ( \n      <ProviderWrapper contexts={[AppProvider]} globalProps={{\n        header: appProps.header\n      }}>\n        <div className=\"appContainer\">\n          <AppHeader />\n            <div className=\"container\">\n              {this.props.children}\n            </div>\n          <AppFooter />\n          {(!process.env.NODE_ENV || process.env.NODE_ENV === 'development') ?\n          <DevView props={appProps} /> : null}\n        </div>\n      </ProviderWrapper>\n    )\n  }\n}\n\nconst styles = {\n  appContainer: {\n\n  }\n}\n\nexport default App;\n\n// do not wrap context api HOC consumer over App.jsx or page component (component generated by 'rails g react excontroller exindex').\n// Only apply them to child components of each page component.\n// then you can access context form any level of deepness.\n\n// Sample Context configured child Component (should be children of any react page component)\n/*\nimport React, { Component } from 'react'\nimport { \n  AppProvider, AppConsumer, appContext \n} from '~/path/for/AppContext'\n\nclass ContextSampleComponent extends Component {\n\n  toggleSample = () => {\n    this.props.appActions.setSampleData(!this.props.appState.sampleData)\n  }\n\n  render() {\n    return(\n        <div>\n            <p>{JSON.stringify(this.props.appState.sampleData)}</p>\n            <button onClick={this.toggleSample}>toggle appContext global data</button>\n        </div>\n    )\n  }\n}\n\nexport default appContext(ContextSampleComponent)\n*/"]},"metadata":{},"sourceType":"module"}